name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual triggering with full matrix for release testing
  workflow_dispatch:
    inputs:
      full_matrix:
        description: 'Run full OS/Python matrix'
        required: false
        default: 'false'
        type: boolean

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ github.event_name == 'pull_request' && 'self-hosted' || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Cost-optimized matrix with self-hosted runners:
        # - PRs: Self-hosted runner (free compute + GitHub web UI)
        # - Pushes to main/develop: GitHub runners (multi-OS validation)
        # - Manual dispatch: Configurable via input
        os: >-
          ${{
            (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.full_matrix == 'true'))
            && fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]')
            || fromJSON('["ubuntu-latest"]')
          }}
        python-version: >-
          ${{
            (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.full_matrix == 'true'))
            && fromJSON('["3.12", "3.13"]')
            || fromJSON('["3.12"]')
          }}

    steps:
    - uses: actions/checkout@v4

    - name: Show test configuration
      run: |
        echo "🧪 **Test Configuration**" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: ${{ runner.name || 'GitHub-hosted' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🖥️ **Self-hosted PR testing**: Running on your own hardware with GitHub web UI" >> $GITHUB_STEP_SUMMARY
          echo "💰 **Cost**: $0 (self-hosted runner)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Full matrix**: Will run on GitHub runners when merged to main/develop" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔄 **Full matrix testing**: Running comprehensive OS/Python combinations" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install FFmpeg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Try Chocolatey with retry, then fallback to direct download
        $maxAttempts = 3
        $attempt = 0
        $success = $false

        while ($attempt -lt $maxAttempts -and -not $success) {
          $attempt++
          Write-Host "Attempt $attempt to install FFmpeg via Chocolatey..."
          try {
            choco install ffmpeg --no-progress -y
            if ($LASTEXITCODE -eq 0) {
              $success = $true
              Write-Host "FFmpeg installed successfully via Chocolatey"
            }
          } catch {
            Write-Host "Chocolatey attempt $attempt failed: $_"
          }
          if (-not $success -and $attempt -lt $maxAttempts) {
            Start-Sleep -Seconds 10
          }
        }

        if (-not $success) {
          Write-Host "Chocolatey failed, trying direct download..."
          Invoke-WebRequest -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "."
          $ffmpegPath = (Get-ChildItem -Path "ffmpeg-*" -Directory | Select-Object -First 1).FullName
          echo "$ffmpegPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Host "FFmpeg installed via direct download"
        }

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Lint with ruff
      run: |
        uv run ruff check .

    - name: Format check with ruff
      run: |
        uv run ruff format --check .

    - name: Type check with mypy (if configured)
      continue-on-error: true
      run: |
        uv run mypy src/ || echo "MyPy not configured or failed"

    - name: Test with pytest
      run: |
        uv run pytest tests/ -v --cov=audio_snippet_automation --cov-report=xml --cov-report=term-missing

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        uv run asa --help
        uv run asa-soundboard --help

        # Test example config creation
        uv run asa-soundboard --create-example test_config.json

        # Verify config was created and is valid JSON
        python -c "import json; json.load(open('test_config.json'))"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run safety check
      continue-on-error: true
      run: |
        uv run pip install safety
        uv run safety check

    - name: Run bandit security scan
      continue-on-error: true
      run: |
        uv run pip install bandit
        uv run bandit -r src/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install build dependencies
      run: uv sync --extra dev

    - name: Build package
      run: |
        uv build

    - name: Check package metadata
      run: |
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install package
      run: |
        uv sync

    - name: Create test CSV
      run: |
        cat > integration_test.csv << EOF
        url,start,end,output,format
        https://www.youtube.com/watch?v=dQw4w9WgXcQ,0,5,test_clip,m4a
        EOF

    - name: Test with mock data (no actual downloads)
      run: |
        # Create mock test that doesn't actually download
        echo "Integration tests would go here - skipped for CI to avoid YouTube dependencies"

        # Test soundboard config generation
        uv run asa-soundboard --create-example integration_config.json

        # Verify config is valid
        python -c "
        import json
        config = json.load(open('integration_config.json'))
        assert 'layout' in config
        assert 'buttons' in config
        print('Integration test passed!')
        "
