name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Simplified matrix: always run only Ubuntu with Python 3.12
        # This reduces CI costs while maintaining adequate testing coverage
        os: ["ubuntu-latest"]
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Show test configuration
      run: |
        echo "🧪 **Test Configuration**" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: GitHub-hosted Ubuntu" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Simplified CI**: Running only Ubuntu + Python 3.12 for cost optimization" >> $GITHUB_STEP_SUMMARY

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Setup virtual audio for testing
      run: |
        # Install audio system dependencies for headless testing
        sudo apt-get install -y pulseaudio alsa-utils
        # Setup dummy audio driver for pygame/soundboard tests
        export PULSE_RUNTIME_PATH=/tmp/pulse
        mkdir -p /tmp/pulse
        # Start pulseaudio in daemon mode with dummy audio
        pulseaudio --start --exit-idle-time=-1 --system=false --disable-shm=true
        # Set SDL audio driver to pulse for pygame
        echo "SDL_AUDIODRIVER=pulse" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Lint with ruff
      run: |
        uv run ruff check .

    - name: Format check with ruff
      run: |
        uv run ruff format --check .

    - name: Type check with mypy (if configured)
      continue-on-error: true
      run: |
        uv run mypy src/ || echo "MyPy not configured or failed"

    - name: Test with pytest
      env:
        SDL_AUDIODRIVER: pulse
        PULSE_RUNTIME_PATH: /tmp/pulse
      run: |
        uv run pytest tests/ -v --cov=audio_snippet_automation --cov-report=xml --cov-report=term-missing

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        uv run asa --help
        uv run asa-soundboard --help

        # Test example config creation
        uv run asa-soundboard --create-example test_config.json

        # Verify config was created and is valid JSON
        uv run python -c "import json; json.load(open('test_config.json'))"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ${{ github.event_name == 'pull_request' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run safety check
      continue-on-error: true
      run: |
        uv tool install safety
        uv tool run safety check

    - name: Run bandit security scan
      continue-on-error: true
      run: |
        uv tool install bandit
        uv tool run bandit -r src/

  build:
    name: Build Distribution
    runs-on: ${{ github.event_name == 'pull_request' && 'self-hosted' || 'ubuntu-latest' }}
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install build dependencies
      run: uv sync --extra dev

    - name: Build package
      run: |
        uv build

    - name: Check package metadata
      run: |
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ${{ github.event_name == 'pull_request' && 'self-hosted' || 'ubuntu-latest' }}
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install package
      run: |
        uv sync

    - name: Create test CSV
      run: |
        cat > integration_test.csv << EOF
        url,start,end,output,format
        https://www.youtube.com/watch?v=dQw4w9WgXcQ,0,5,test_clip,m4a
        EOF

    - name: Test with mock data (no actual downloads)
      run: |
        # Create mock test that doesn't actually download
        echo "Integration tests would go here - skipped for CI to avoid YouTube dependencies"

        # Test soundboard config generation
        uv run asa-soundboard --create-example integration_config.json

        # Verify config is valid
        uv run python -c "
        import json
        config = json.load(open('integration_config.json'))
        assert 'layout' in config
        assert 'buttons' in config
        print('Integration test passed!')
        "
