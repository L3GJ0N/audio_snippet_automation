[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "audio-snippet-automation"
version = "0.2.0"
description = "Create multiple precisely trimmed audio snippets from YouTube URLs using a single CSV file"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Utilities",
]
keywords = ["youtube", "audio", "ffmpeg", "yt-dlp", "snippets", "batch"]
requires-python = ">=3.9"
dependencies = [
    "yt-dlp>=2024.1.0",
    "flask>=3.0.0",
    "pygame>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "pre-commit>=3.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/L3GJ0N/audio_snippet_automation"
Repository = "https://github.com/L3GJ0N/audio_snippet_automation"
Issues = "https://github.com/L3GJ0N/audio_snippet_automation/issues"

[project.scripts]
audio-snippet-automation = "audio_snippet_automation.cli:main"
asa = "audio_snippet_automation.cli:main"
asa-soundboard = "audio_snippet_automation.soundboard_cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/audio_snippet_automation"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "examples/",
    "docs/",
    "README.md",
    "LICENSE",
]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=audio_snippet_automation",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
